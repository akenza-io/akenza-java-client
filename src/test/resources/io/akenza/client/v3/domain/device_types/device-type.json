{
  "id": "33dd62d6487c263c",
  "name": "DL-ATM41",
  "description": "All-in-one weather station with sensors for solar radiation, precipitation, air temperature, relative humidity, indoor temperature, vapor pressure, air pressure, barometric pressure, wind speed and direction, maximum wind speed, tilt sensor, number of lightning strikes and average lightning distance.",
  "type": "library",
  "organizationId": null,
  "version": 0,
  "meta": {
    "manufacturer": "Decentlab",
    "url": "https://www.decentlab.com/products/eleven-parameter-weather-station-for-lorawan",
    "author": "Akenza AG",
    "properties": null,
    "firmwareVersion": "V2.0.0",
    "encoding": "HEX",
    "connectivity": "LORA",
    "availableSensors": [
      "Solar radiation",
      "Precipitation",
      "Lightning strike detector",
      "Wind speed",
      "Wind direction",
      "Humidity",
      "Temperature",
      "Vapor Pressure",
      "Barometric Pressure"
    ],
    "outputTopics": [
      "default",
      "lifecycle"
    ]
  },
  "created": "2022-12-13T20:08:01.955048601Z",
  "schemas": {
    "lifecycle": "{\n  \"$id\": \"https://akenza.io/decentlab/atm41/lifecycle.schema.json\",\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Lifecycle\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"voltage\": {\n      \"title\": \"Battery voltage\",\n      \"unit\": \"V\",\n      \"type\": \"number\",\n      \"minimum\": 0,\n      \"maximum\": 24,\n      \"desciption\": \"The battery voltage in Volt.\"\n    },\n    \"protocolVersion\": {\n      \"title\": \"Protocol Version\",\n      \"description\": \"Protocol Version\",\n      \"type\": \"integer\",\n      \"hideFromKpis\": true\n    },\n    \"deviceID\": {\n      \"title\": \"Device ID\",\n      \"description\": \"Device ID\",\n      \"type\": \"integer\",\n      \"hideFromKpis\": true\n    },\n    \"sensorTemperatureInternal\": {\n      \"title\": \"Sensor temperature (internal)\",\n      \"unit\": \"°C\",\n      \"type\": \"number\",\n      \"description\": \"Sensor temperature (internal)\",\n      \"minimum\": -50,\n      \"maximum\": 80,\n      \"hideFromKpis\": true\n    },\n    \"xOrientationAngle\": {\n      \"title\": \"X orientation angle\",\n      \"unit\": \"°\",\n      \"type\": \"number\",\n      \"description\": \"X orientation angle\"\n    },\n    \"yOrientationAngle\": {\n      \"title\": \"Y orientation angle\",\n      \"unit\": \"°\",\n      \"type\": \"number\",\n      \"description\": \"Y orientation angle\"\n    },\n    \"compassHeading\": {\n      \"title\": \"Compass heading\",\n      \"unit\": \"°\",\n      \"type\": \"number\",\n      \"description\": \"Compass heading\"\n    }\n  }\n}\n",
    "default": "{\n  \"$id\": \"https://akenza.io/decentlab/atm41/default.schema.json\",\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Default\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"solarRadiation\": {\n      \"title\": \"Solar radiation\",\n      \"unit\": \"W⋅m⁻²\",\n      \"type\": \"number\",\n      \"description\": \"Solar radiation\"\n    },\n    \"precipitation\": {\n      \"title\": \"Precipitation\",\n      \"unit\": \"mm\",\n      \"type\": \"number\",\n      \"description\": \"Precipitation\"\n    },\n    \"lightningStrikeCount\": {\n      \"title\": \"Lightning strike count\",\n      \"type\": \"integer\",\n      \"description\": \"Lightning strike count\"\n    },\n    \"lightningAverageDistance\": {\n      \"title\": \"Lightning average distance\",\n      \"unit\": \"km\",\n      \"type\": \"number\",\n      \"description\": \"Lightning average distance\"\n    },\n    \"windSpeed\": {\n      \"title\": \"Wind speed\",\n      \"unit\": \"m⋅s⁻¹\",\n      \"type\": \"number\",\n      \"description\": \"Wind speed\"\n    },\n    \"windDirection\": {\n      \"title\": \"Wind direction\",\n      \"unit\": \"°\",\n      \"type\": \"number\",\n      \"description\": \"Wind direction\"\n    },\n    \"maximumWindSpeed\": {\n      \"title\": \"Maximum wind speed\",\n      \"unit\": \"m⋅s⁻¹\",\n      \"type\": \"number\",\n      \"description\": \"Maximum wind speed\"\n    },\n    \"temperature\": {\n      \"title\": \"Air temperature\",\n      \"unit\": \"°C\",\n      \"type\": \"number\",\n      \"description\": \"Air temperature\",\n      \"minimum\": -50,\n      \"maximum\": 80\n    },\n    \"vaporPressure\": {\n      \"title\": \"Vapor pressure\",\n      \"unit\": \"kPa\",\n      \"type\": \"number\",\n      \"description\": \"Vapor pressure\"\n    },\n    \"atmosphericPressure\": {\n      \"title\": \"Atmospheric pressure\",\n      \"unit\": \"kPa\",\n      \"type\": \"number\",\n      \"description\": \"Atmospheric pressure\"\n    },\n    \"humidity\": {\n      \"title\": \"Relative humidity\",\n      \"unit\": \"%\",\n      \"type\": \"number\",\n      \"description\": \"Relative humidity\",\n      \"minimum\": 0,\n      \"maximum\": 100\n    },\n    \"northWindSpeed\": {\n      \"title\": \"North wind speed\",\n      \"unit\": \"m⋅s⁻¹\",\n      \"type\": \"number\",\n      \"description\": \"North wind speed\"\n    },\n    \"eastWindSpeed\": {\n      \"title\": \"East wind speed\",\n      \"unit\": \"m⋅s⁻¹\",\n      \"type\": \"number\",\n      \"description\": \"East wind speed\"\n    }\n  }\n}"
  },
  "uplinkScript": {
    "code": "var decentlab_decoder = {\n  PROTOCOL_VERSION: 2,\n  SENSORS: [\n    {\n      length: 17,\n      values: [\n        {\n          name: \"solar_radiation\",\n          displayName: \"Solar radiation\",\n          convert: function (x) {\n            return x[0] - 32768;\n          },\n          unit: \"W⋅m⁻²\",\n        },\n        {\n          name: \"precipitation\",\n          displayName: \"Precipitation\",\n          convert: function (x) {\n            return (x[1] - 32768) / 1000;\n          },\n          unit: \"mm\",\n        },\n        {\n          name: \"lightning_strike_count\",\n          displayName: \"Lightning strike count\",\n          convert: function (x) {\n            return x[2] - 32768;\n          },\n        },\n        {\n          name: \"lightning_average_distance\",\n          displayName: \"Lightning average distance\",\n          convert: function (x) {\n            return x[3] - 32768;\n          },\n          unit: \"km\",\n        },\n        {\n          name: \"wind_speed\",\n          displayName: \"Wind speed\",\n          convert: function (x) {\n            return (x[4] - 32768) / 100;\n          },\n          unit: \"m⋅s⁻¹\",\n        },\n        {\n          name: \"wind_direction\",\n          displayName: \"Wind direction\",\n          convert: function (x) {\n            return (x[5] - 32768) / 10;\n          },\n          unit: \"°\",\n        },\n        {\n          name: \"maximum_wind_speed\",\n          displayName: \"Maximum wind speed\",\n          convert: function (x) {\n            return (x[6] - 32768) / 100;\n          },\n          unit: \"m⋅s⁻¹\",\n        },\n        {\n          name: \"air_temperature\",\n          displayName: \"Air temperature\",\n          convert: function (x) {\n            return (x[7] - 32768) / 10;\n          },\n          unit: \"°C\",\n        },\n        {\n          name: \"vapor_pressure\",\n          displayName: \"Vapor pressure\",\n          convert: function (x) {\n            return (x[8] - 32768) / 100;\n          },\n          unit: \"kPa\",\n        },\n        {\n          name: \"atmospheric_pressure\",\n          displayName: \"Atmospheric pressure\",\n          convert: function (x) {\n            return (x[9] - 32768) / 100;\n          },\n          unit: \"kPa\",\n        },\n        {\n          name: \"relative_humidity\",\n          displayName: \"Relative humidity\",\n          convert: function (x) {\n            return (x[10] - 32768) / 10;\n          },\n          unit: \"%\",\n        },\n        {\n          name: \"sensor_temperature_internal\",\n          displayName: \"Sensor temperature (internal)\",\n          convert: function (x) {\n            return (x[11] - 32768) / 10;\n          },\n          unit: \"°C\",\n        },\n        {\n          name: \"x_orientation_angle\",\n          displayName: \"X orientation angle\",\n          convert: function (x) {\n            return (x[12] - 32768) / 10;\n          },\n          unit: \"°\",\n        },\n        {\n          name: \"y_orientation_angle\",\n          displayName: \"Y orientation angle\",\n          convert: function (x) {\n            return (x[13] - 32768) / 10;\n          },\n          unit: \"°\",\n        },\n        {\n          name: \"compass_heading\",\n          displayName: \"Compass heading\",\n          convert: function (x) {\n            return x[14] - 32768;\n          },\n          unit: \"°\",\n        },\n        {\n          name: \"north_wind_speed\",\n          displayName: \"North wind speed\",\n          convert: function (x) {\n            return (x[15] - 32768) / 100;\n          },\n          unit: \"m⋅s⁻¹\",\n        },\n        {\n          name: \"east_wind_speed\",\n          displayName: \"East wind speed\",\n          convert: function (x) {\n            return (x[16] - 32768) / 100;\n          },\n          unit: \"m⋅s⁻¹\",\n        },\n      ],\n    },\n    {\n      length: 1,\n      values: [\n        {\n          name: \"voltage\",\n          displayName: \"Battery voltage\",\n          convert: function (x) {\n            return x[0] / 1000;\n          },\n          unit: \"V\",\n        },\n      ],\n    },\n  ],\n\n  read_int: function (bytes, pos) {\n    return (bytes[pos] << 8) + bytes[pos + 1];\n  },\n\n  decode: function (msg) {\n    var bytes = msg;\n    var i, j;\n    if (typeof msg === \"string\") {\n      bytes = [];\n      for (i = 0; i < msg.length; i += 2) {\n        bytes.push(parseInt(msg.substring(i, i + 2), 16));\n      }\n    }\n\n    var version = bytes[0];\n    if (version != this.PROTOCOL_VERSION) {\n      return { error: \"protocol version \" + version + \" doesn't match v2\" };\n    }\n\n    var deviceId = this.read_int(bytes, 1);\n    var flags = this.read_int(bytes, 3);\n    var result = { protocol_version: version, device_id: deviceId };\n    // decode payload\n    var pos = 5;\n    for (i = 0; i < this.SENSORS.length; i++, flags >>= 1) {\n      if ((flags & 1) !== 1) continue;\n\n      var sensor = this.SENSORS[i];\n      var x = [];\n      // convert data to 16-bit integer array\n      for (j = 0; j < sensor.length; j++) {\n        x.push(this.read_int(bytes, pos));\n        pos += 2;\n      }\n\n      // decode sensor values\n      for (j = 0; j < sensor.values.length; j++) {\n        var value = sensor.values[j];\n        if (\"convert\" in value) {\n          result[value.name] = value.convert.bind(this)(x);\n        }\n      }\n    }\n    return result;\n  },\n};\n\nfunction deleteUnusedKeys(data) {\n  var keysRetained = false;\n  Object.keys(data).forEach((key) => {\n    if (data[key] === undefined) {\n      delete data[key];\n    } else {\n      keysRetained = true;\n    }\n  });\n  return keysRetained;\n}\n\nfunction consume(event) {\n  var payload = event.data.payloadHex;\n  var sample = decentlab_decoder.decode(payload);\n  var data = {};\n  var lifecycle = {};\n\n  // Default values\n  data.solarRadiation = sample[\"solar_radiation\"];\n  data.precipitation = sample[\"precipitation\"];\n  data.lightningStrikeCount = sample[\"lightning_strike_count\"];\n  data.lightningAverageDistance = sample[\"lightning_average_distance\"];\n  data.windSpeed = sample[\"wind_speed\"];\n  data.windDirection = sample[\"wind_direction\"];\n  data.maximumWindSpeed = sample[\"maximum_wind_speed\"];\n  data.temperature = sample[\"air_temperature\"];\n  data.vaporPressure = sample[\"vapor_pressure\"];\n  data.atmosphericPressure = sample[\"atmospheric_pressure\"];\n  data.humidity = sample[\"relative_humidity\"];\n  data.eastWindSpeed = sample[\"east_wind_speed\"];\n  data.northWindSpeed = sample[\"north_wind_speed\"];\n\n  // Lifecycle values\n  lifecycle.voltage = sample[\"voltage\"];\n  lifecycle.protocolVersion = sample[\"protocol_version\"];\n  lifecycle.deviceID = sample[\"device_id\"];\n  lifecycle.sensorTemperatureInternal = sample[\"sensor_temperature_internal\"];\n  lifecycle.xOrientationAngle = sample[\"x_orientation_angle\"];\n  lifecycle.yOrientationAngle = sample[\"y_orientation_angle\"];\n  lifecycle.compassHeading = sample[\"compass_heading\"];\n\n  if (deleteUnusedKeys(data)) {\n    emit(\"sample\", { data: data, topic: \"default\" });\n  }\n\n  if (deleteUnusedKeys(lifecycle)) {\n    emit(\"sample\", { data: lifecycle, topic: \"lifecycle\" });\n  }\n}\n",
    "version": 0
  },
  "downlinkScript": {
    "code": null,
    "version": 0
  },
  "libraryPath": "/repos/akenza-io/device-type-library/contents/types/decentlab/ATM41",
  "pictureUrl": "https://raw.githubusercontent.com/akenza-io/device-type-library/master/types/decentlab/ATM41/ATM41.jpeg"
}